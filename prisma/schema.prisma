// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// FIXME: When using OAtuh, the email verified is somehow null, need to fix this, i can't find the file where the email is being set to null
model User {
  id                               String                   @id @default(cuid())
  name                             String?
  email                            String?                  @unique
  emailVerified                    Boolean?                 @default(false)
  image                            String?
  password                         String?
  role                             UserRole                 @default(USER)
  createdAt                        DateTime                 @default(now())
  accounts                         Account[]
  sessions                         Session[]
  isTwoFactorAuthenticationEnabled Boolean                  @default(false)
  twoFactorAuthentication          TwoFactorAuthentication?
}

model TwoFactorAuthentication {
  id        String   @id @default(cuid())
  userId    String
  secret    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model TwoFactorAuthenticationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// TODO: Will use this to create magic links/ codes to enable user login
model VerificationToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
